<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ output extension=".cs" #>
<#
List<string> curatedDocs = new List<string>()
{
    //"CombinedScriptsData",
    //"countries",
    //"devtestcoll",
    //"lastfm",
    //"LogData",
    //"MillionSong1KDocuments",
    //"MsnCollection",
    "NutritionData",
    //"runsCollection",
    //"states_committees",
    //"states_legislators",
    //"store01C",
    //"TicinoErrorBuckets",
    //"twitter_data",
    //"ups1",
    //"XpertEvents",
};
#>
//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// <#= ModificationInstructions() #>

/// <summary>
/// We don't have access to Microsoft.Azure.Cosmos.Core which is needed for JsonStringDictionary / dictionary encoded strings.
/// </summary>
#define NeedCore

namespace Microsoft.Azure.Cosmos.Performance.Tests.Json
{
    using System;
    using System.Text;
    using BenchmarkDotNet.Attributes;
    using Microsoft.Azure.Cosmos.Json;
    using Microsoft.Azure.Cosmos.Json.Interop;
    using Microsoft.Azure.Cosmos.Tests;
    using Microsoft.Azure.Cosmos.Tests.Json;

    [MemoryDiagnoser]
    public class JsonRoundtripBenchmark
    {
<#  foreach (string curatedDoc in curatedDocs) { #>
        private static readonly CurratedDocsPayload <#= curatedDoc #>Data = CurratedDocsPayload.CreateFromCurratedDocs("<#= curatedDoc #>");
<# } #>

<#  foreach (string curatedDoc in curatedDocs) { #>
<#  foreach (var sourceFormat in Enum.GetValues(typeof(SerializationFormat))) { #>
<#  foreach (var destinationFormat in Enum.GetValues(typeof(SerializationFormat))) { #>
        [Benchmark]
        public void <#= curatedDoc #>_<#= sourceFormat #>Reader_To_<#= destinationFormat #>Writer()
        {
            JsonRoundtripBenchmark.ExecuteReaderBenchmark(
                payload: JsonRoundtripBenchmark.<#= curatedDoc #>Data,
                sourceFormat: SerializationFormat.<#= sourceFormat #>,
                destinationFormat: SerializationFormat.<#= destinationFormat #>);
        }

<# } #>
<# } #>
<# } #>

<#  foreach (string curatedDoc in curatedDocs) { #>
<#  foreach (SerializationFormat sourceFormat in Enum.GetValues(typeof(SerializationFormat))) { if (sourceFormat == SerializationFormat.NewtonsoftText) { continue; } #>
<#  foreach (SerializationFormat destinationFormat in Enum.GetValues(typeof(SerializationFormat))) { if (destinationFormat == SerializationFormat.NewtonsoftText) { continue; } #>
        [Benchmark]
        public void <#= curatedDoc #>_<#= sourceFormat #>Navigator_To_<#= destinationFormat #>Writer()
        {
            JsonRoundtripBenchmark.ExecuteNavigatorBenchmark(
                payload: JsonRoundtripBenchmark.<#= curatedDoc #>Data,
                sourceFormat: SerializationFormat.<#= sourceFormat #>,
                destinationFormat: SerializationFormat.<#= destinationFormat #>);
        }

<# } #>
<# } #>
<# } #>

        private static void ExecuteReaderBenchmark(
            CurratedDocsPayload payload,
            SerializationFormat sourceFormat,
            SerializationFormat destinationFormat)
        {
            IJsonReader reader = sourceFormat switch
            {
                SerializationFormat.Text => JsonReader.Create(payload.Text),
                SerializationFormat.Binary => JsonReader.Create(payload.Binary),
                SerializationFormat.NewtonsoftText => NewtonsoftToCosmosDBReader.CreateFromBuffer(payload.Text),
                _ => throw new ArgumentException($"Unexpected {nameof(sourceFormat)} of type: '{sourceFormat}'"),
            };

            IJsonWriter writer = destinationFormat switch
            {
                SerializationFormat.Text => JsonWriter.Create(JsonSerializationFormat.Text),
                SerializationFormat.Binary => JsonWriter.Create(JsonSerializationFormat.Binary),
                SerializationFormat.NewtonsoftText => NewtonsoftToCosmosDBWriter.CreateTextWriter(),
                _ => throw new ArgumentException($"Unexpected {nameof(destinationFormat)} of type: {destinationFormat}"),
            };

            writer.WriteAll(reader);
        }

        private static void ExecuteNavigatorBenchmark(
            CurratedDocsPayload payload,
            SerializationFormat sourceFormat,
            SerializationFormat destinationFormat)
        {
            IJsonNavigator navigator = sourceFormat switch
            {
                SerializationFormat.Text => JsonNavigator.Create(payload.Text),
                SerializationFormat.Binary => JsonNavigator.Create(payload.Binary),
                _ => throw new ArgumentException($"Unexpected {nameof(sourceFormat)} of type: '{sourceFormat}'"),
            };

            IJsonWriter writer = destinationFormat switch
            {
                SerializationFormat.Text => JsonWriter.Create(JsonSerializationFormat.Text),
                SerializationFormat.Binary => JsonWriter.Create(JsonSerializationFormat.Binary),
                _ => throw new ArgumentException($"Unexpected {nameof(destinationFormat)} of type: {destinationFormat}"),
            };

            writer.WriteJsonNode(navigator, navigator.GetRootNode());
        }

        private enum SerializationFormat
        {
<#  foreach (var value in Enum.GetValues(typeof(SerializationFormat))) { #>
            <#= value #>,
<# } #>
        }

        private readonly struct CurratedDocsPayload
        {
            private CurratedDocsPayload(
                ReadOnlyMemory<byte> text,
                ReadOnlyMemory<byte> binary
#if !NeedCore
                ,
                (ReadOnlyMemory<byte> binary, JsonStringDictionary dictionary) binaryWithDictionaryEncoding
#endif
                )
            {
                this.Text = text;
                this.Binary = binary;
#if !NeedCore
                this.BinaryWithDictionaryEncoding = binaryWithDictionaryEncoding;
#endif
            }

            public ReadOnlyMemory<byte> Text { get; }
            public ReadOnlyMemory<byte> Binary { get; }
#if !NeedCore
            public (ReadOnlyMemory<byte> binary, JsonStringDictionary dictionary) BinaryWithDictionaryEncoding { get; }
#endif
            public static CurratedDocsPayload CreateFromCurratedDocs(string name)
            {
                if (name == null)
                {
                    throw new ArgumentNullException(nameof(name));
                }

                string path = $"TestJsons/{name}.json";
                string json = TextFileConcatenation.ReadMultipartFile(path);

                ReadOnlyMemory<byte> text = Encoding.UTF8.GetBytes(json);
                ReadOnlyMemory<byte> binary = JsonTestUtils.ConvertTextToBinary(json);
#if !NeedCore
                JsonStringDictionary jsonStringDictionary = new JsonStringDictionary(capacity: 128);
                ReadOnlyMemory<byte> dictionaryEncodedBinary = JsonTestUtils.ConvertTextToBinary(json, jsonStringDictionary);
#endif

                return new CurratedDocsPayload(
                    text: text,
                    binary: binary
#if !NeedCore
                    ,
                    binaryWithDictionaryEncoding: (dictionaryEncodedBinary, jsonStringDictionary)
#endif
                    );
            }
        }
    }
}
<#+
enum SerializationFormat
{
    Text,
    Binary,
    NewtonsoftText,
}
#>
<#+
private static string ModificationInstructions(
                        [CallerFilePath] string file = "",
                        [CallerLineNumber] int line = 0)
{
    return $"This is auto-generated code. Modify: {Path.GetFileName(file)}: {line}";
}
#>